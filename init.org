* Require and load the following packages

 #+BEGIN_SRC emacs-lisp
(prelude-require-packages '(solarized-theme
                            org-bullets
                            htmlize
                            ox-reveal
                            ))
#+END_SRC

* General Settings

#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
(guru-global-mode +1)
(toggle-frame-fullscreen)
(helm-mode 1)
#+END_SRC

* SuperCollider configuration

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path  "~/.emacs.d/vendor/el")
(load-file  "~/.emacs.d/vendor/el/sclang.el")

(require 'sclang)

(add-hook 'sclang-mode-hook 'turn-on-smartparens-mode)

(defvar sc_userAppSupportDir
  (  expand-file-name  "~/Library/Application Support/SuperCollider" ))

(add-to-list
 'exec-path
 "/Applications/SuperCollider/SuperCollider.app/Contents/MacOS/")

(global-set-key (kbd "C-c M-s") 'sclang-start)
(global-set-key (kbd "C-c W") 'sclang-switch-to-workspace)

(setq sclang-show-workspace-on-startup 1)
#+END_SRC

** Org Babel SClang

#+BEGIN_SRC emacs-lisp
  (require 'org)
  (require 'ob)

  (require 'sclang-interp)

  (defgroup ob-sclang nil
    "org-mode blocks for SuperCollider SCLang."
    :group 'org)

  ;;;###autoload
  (defun org-babel-execute:sclang (body params)
    "Org-mode Babel sclang hook for evaluate `BODY' with `PARAMS'."
    (unless (or (equal (buffer-name) sclang-post-buffer)
                (sclang-get-process))
      (sclang-start))

    (sclang-eval-string body t))

  (defvar org-babel-default-header-args:sclang nil)

  (setq org-babel-default-header-args:sclang
        '((:session . "*SCLang:Workspace*")
          (:output . "none")) ; TODO: temporary can't find way to let sclang output to stdout for org-babel.
        )

  (with-eval-after-load "org"
    (add-to-list 'org-src-lang-modes '("sclang" . sclang)))

  (provide 'ob-sclang)

 #+END_SRC

* Org mode setting and  hooks

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'org-bullets-mode)
  (setq org-src-fontify-natively t)
#+END_SRC

* Personal keybindings

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-3") '(lambda () (interactive) (insert "#")))
#+END_SRC
